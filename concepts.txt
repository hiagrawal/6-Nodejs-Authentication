For encrypting password:
npm install --save bcryptjs

for CSRF token: this is a package for node express which allows us to generate csrf token 
npm install --save csurf

1. we will include this pkg in application
const csrf = require('csurf');
2. Then we will initialize it like we are doing for express and mongoDb store
const csrfProtection = csrf();
3. Then we will add this as a middleware. This should be after sessions middleware has been added as it uses session.
app.use(csrfProtection);
4. so now every request that comes through will pass through this csrf middleware. 
It validates all 'post' requests since post request has the data 
5. Now we need to add csrf token to request that come to the server so server will check for this csrf token 
and hence validates that it is a coming from a genuine request and not any fraud request

for this, view must pass this csrf token, that is view must have access to this token
so, when we render the page, we pass this paramter to view and then view passes this to server in post request 
and server validates the same

for this, we have csrfToken() method added by middleware that generates a random hashed csrf token
which we pass to the view and send back the same in post request
this should be with the name '_csrf' only as it looks for value of this tag only to validate the same

Now, we need all views to add access to this token. For this we will have to pass this csrf paramter to our view 
whereever we render the view

to avoid this, we can add a middleware and set all variables that we need access to in all our views in res locals
res.locals is a feature provided by node expressjs to set all local variables that we need to access in all views

so, before we add our route middleware, we will add this middlware to add locals

If we want some data to show in any middleware on basis of other middleware that is we want data to get access between multiple
requests, then we can use sessions. But storing data in sessions for some error messages and then removing it might be very
cumbersome and for this we have connect-flash package which uses sessions internally and remove it from session later
npm install --save connect-flash

1. First we need to include this in our application
2. then we need to initialize it. This needs to be initialized after session
3. this gives us access to flash() method through which we can set anything
4. and access the same in another request middleware through key


